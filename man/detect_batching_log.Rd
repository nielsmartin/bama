% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bama_api.R
\name{detect_batching_log}
\alias{detect_batching_log}
\title{Detect Batch Behavior in an Event Log}
\usage{
detect_batching_log(
  log,
  subsequence_type = c("mine", "enum"),
  subsequence_min_support = 0.01,
  seq_tolerated_gap = 0,
  within_case_seq_tolerated_gap = seq_tolerated_gap,
  between_cases_seq_tolerated_gap = seq_tolerated_gap,
  arrival_event_gap = NULL,
  show_progress = T
)
}
\arguments{
\item{log}{The `bupaR` event log object that should be animated}

\item{subsequence_type}{How to determine the subsequence list containing all sets of combinations for which case-based batching behavior will be detected. Either `enum` for exhaustive enumeration (which is often infeasible) or `mine` for using frequent sequence mining via the SPADE algoritm}

\item{subsequence_min_support}{The minimum support require when using frequent sequence mining.}

\item{seq_tolerated_gap}{The sequential tolerated gapfor each activity. Only when activity instances follow each other within that gap time, they will form a sequential batch. The default is 0.}

\item{within_case_seq_tolerated_gap}{Tolerated time gap to detect sequential batching between activities within a particular case}

\item{between_cases_seq_tolerated_gap}{Tolerated time gap to detect sequential batching between (aggregated) activities over several cases}

\item{show_progress}{Whether to show a progress bar in the console.}

\item{act_seq_tolerated_gap_list}{List containing the tolerated time gap for a particular each activity (used for sequential batching detection)}
}
\description{
Detect batch behavior using the Bama algorithm based on a bupaR event log.
}
